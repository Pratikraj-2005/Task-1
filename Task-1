TO-DO LIST

Command-Line Interface (CLI) To-Do List Application
Here's a simple CLI-based To-Do List application:

Set Up the Project:

Create a Python file named todo_cli.py.
Basic Structure:

import json
import os

# File to store the to-do list
FILE_NAME = 'todo_list.json'

def load_tasks():
    if os.path.exists(FILE_NAME):
        with open(FILE_NAME, 'r') as file:
            return json.load(file)
    return []

def save_tasks(tasks):
    with open(FILE_NAME, 'w') as file:
        json.dump(tasks, file, indent=4)

def add_task(tasks, task):
    tasks.append({'task': task, 'completed': False})
    save_tasks(tasks)

def list_tasks(tasks):
    if not tasks:
        print("No tasks found.")
        return
    for idx, task in enumerate(tasks):
        status = 'Done' if task['completed'] else 'Not Done'
        print(f"{idx + 1}. {task['task']} - {status}")

def complete_task(tasks, task_number):
    if 0 < task_number <= len(tasks):
        tasks[task_number - 1]['completed'] = True
        save_tasks(tasks)
    else:
        print("Invalid task number.")

def main():
    tasks = load_tasks()

    while True:
        print("\nTo-Do List Application")
        print("1. Add Task")
        print("2. List Tasks")
        print("3. Complete Task")
        print("4. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            task = input("Enter the task: ")
            add_task(tasks, task)
        elif choice == '2':
            list_tasks(tasks)
        elif choice == '3':
            task_number = int(input("Enter task number to complete: "))
            complete_task(tasks, task_number)
        elif choice == '4':
            break
        else:
            print("Invalid choice. Please choose again.")

if __name__ == "__main__":
    main()


Graphical User Interface (GUI) To-Do List Application
For a GUI-based application, you can use tkinter, which is included with Python. Here's a basic example:

Set Up the Project:

Create a Python file named todo_gui.py.
Basic Structure:


import tkinter as tk
from tkinter import messagebox
import json
import os

# File to store the to-do list
FILE_NAME = 'todo_list.json'

def load_tasks():
    if os.path.exists(FILE_NAME):
        with open(FILE_NAME, 'r') as file:
            return json.load(file)
    return []

def save_tasks(tasks):
    with open(FILE_NAME, 'w') as file:
        json.dump(tasks, file, indent=4)

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Application")

        self.tasks = load_tasks()

        self.frame = tk.Frame(self.root)
        self.frame.pack(pady=10)

        self.task_listbox = tk.Listbox(self.frame, width=50, height=10)
        self.task_listbox.pack(side=tk.LEFT)

        self.scrollbar = tk.Scrollbar(self.frame, orient=tk.VERTICAL)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.task_listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.task_listbox.yview)

        self.entry_task = tk.Entry(self.root, width=50)
        self.entry_task.pack(pady=5)

        self.button_add = tk.Button(self.root, text="Add Task", command=self.add_task)
        self.button_add.pack(pady=5)

        self.button_complete = tk.Button(self.root, text="Complete Task", command=self.complete_task)
        self.button_complete.pack(pady=5)

        self.load_tasks()

    def load_tasks(self):
        self.task_listbox.delete(0, tk.END)
        for task in self.tasks:
            status = 'Done' if task['completed'] else 'Not Done'
            self.task_listbox.insert(tk.END, f"{task['task']} - {status}")

    def add_task(self):
        task = self.entry_task.get()
        if task:
            self.tasks.append({'task': task, 'completed': False})
            self.save_tasks()
            self.load_tasks()
            self.entry_task.delete(0, tk.END)
        else:
            messagebox.showwarning("Input Error", "Please enter a task.")

    def complete_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            self.tasks[index]['completed'] = True
            self.save_tasks()
            self.load_tasks()
        else:
            messagebox.showwarning("Selection Error", "Please select a task to mark as complete.")

    def save_tasks(self):
        save_tasks(self.tasks)

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
